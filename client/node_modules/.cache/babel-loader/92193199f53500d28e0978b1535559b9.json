{"ast":null,"code":"import get from 'lodash/get';\nexport var canReplyWithCache = function (type, payload, resourceState) {\n  var now = new Date();\n\n  switch (type) {\n    case 'getList':\n      return get(resourceState, ['list', 'cachedRequests', JSON.stringify(payload), 'validity']) > now;\n\n    case 'getOne':\n      return resourceState && resourceState.validity && resourceState.validity[payload.id] > now;\n\n    case 'getMany':\n      return resourceState && resourceState.validity && payload.ids.every(function (id) {\n        return resourceState.validity[id] > now;\n      });\n\n    default:\n      return false;\n  }\n};\nexport var getResultFromCache = function (type, payload, resourceState) {\n  switch (type) {\n    case 'getList':\n      {\n        var data_1 = resourceState.data;\n        var requestSignature = JSON.stringify(payload);\n        var cachedRequest = resourceState.list.cachedRequests[requestSignature];\n        return {\n          data: cachedRequest.ids.map(function (id) {\n            return data_1[id];\n          }),\n          total: cachedRequest.total\n        };\n      }\n\n    case 'getOne':\n      return {\n        data: resourceState.data[payload.id]\n      };\n\n    case 'getMany':\n      return {\n        data: payload.ids.map(function (id) {\n          return resourceState.data[id];\n        })\n      };\n\n    default:\n      throw new Error('cannot reply with cache for this method');\n  }\n};","map":null,"metadata":{},"sourceType":"module"}