{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { FETCH_END, REFRESH_VIEW } from '../../../actions';\nimport { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from '../../../core';\nvar initialState = {};\n\nvar validityReducer = function (previousState, _a) {\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  var type = _a.type,\n      payload = _a.payload,\n      requestPayload = _a.requestPayload,\n      meta = _a.meta;\n\n  if (type === REFRESH_VIEW) {\n    return initialState;\n  }\n\n  if (!meta || !meta.fetchResponse || meta.fetchStatus !== FETCH_END || meta.fromCache === true) {\n    return previousState;\n  }\n\n  if (payload.validUntil) {\n    // store the validity date\n    switch (meta.fetchResponse) {\n      case GET_LIST:\n      case GET_MANY:\n      case GET_MANY_REFERENCE:\n        return addIds(payload.data.map(function (record) {\n          return record.id;\n        }), payload.validUntil, previousState);\n\n      case UPDATE_MANY:\n        return addIds(payload.data, payload.validUntil, previousState);\n\n      case UPDATE:\n      case CREATE:\n      case GET_ONE:\n        return addIds([payload.data.id], payload.validUntil, previousState);\n\n      case DELETE:\n      case DELETE_MANY:\n        throw new Error('Responses to dataProvider.delete() or dataProvider.deleteMany() should not contain a validUntil param');\n\n      default:\n        return previousState;\n    }\n  } else {\n    // remove the validity date\n    switch (meta.fetchResponse) {\n      case GET_LIST:\n      case GET_MANY:\n      case GET_MANY_REFERENCE:\n        return removeIds(payload.data.map(function (record) {\n          return record.id;\n        }), previousState);\n\n      case UPDATE:\n      case CREATE:\n      case GET_ONE:\n        return removeIds([payload.data.id], previousState);\n\n      case UPDATE_MANY:\n        return removeIds(payload.data, previousState);\n\n      case DELETE:\n        return removeIds([requestPayload.id], previousState);\n\n      case DELETE_MANY:\n        return removeIds(requestPayload.ids, previousState);\n\n      default:\n        return previousState;\n    }\n  }\n};\n\nvar addIds = function (ids, validUntil, oldValidityRegistry) {\n  if (ids === void 0) {\n    ids = [];\n  }\n\n  var validityRegistry = __assign({}, oldValidityRegistry);\n\n  ids.forEach(function (id) {\n    validityRegistry[id] = validUntil;\n  });\n  return validityRegistry;\n};\n\nvar removeIds = function (ids, oldValidityRegistry) {\n  if (ids === void 0) {\n    ids = [];\n  }\n\n  var validityRegistry = __assign({}, oldValidityRegistry);\n\n  ids.forEach(function (id) {\n    delete validityRegistry[id];\n  });\n  return validityRegistry;\n};\n\nexport default validityReducer;","map":null,"metadata":{},"sourceType":"module"}