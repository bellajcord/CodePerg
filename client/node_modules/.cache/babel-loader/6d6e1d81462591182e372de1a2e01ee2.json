{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport uniq from 'lodash/uniq';\nimport { CRUD_GET_LIST_SUCCESS, CRUD_CREATE_SUCCESS } from '../../../../actions';\nimport { DELETE, DELETE_MANY } from '../../../../core';\n/**\n * List of the ids of the latest loaded page, regardless of params\n *\n * When loading a the list for the first time, useListController grabs the ids\n * from the cachedRequests reducer (not this ids reducer). It's only when the user\n * changes page, sort, or filter, that the useListController hook uses the ids\n * reducer, so as to show the previous list of results while loading the new\n * list (intead of displaying a blank page each time the list params change).\n *\n * @see useListController\n *\n */\n\nvar idsReducer = function (previousState, action) {\n  if (previousState === void 0) {\n    previousState = [];\n  }\n\n  if (action.meta && action.meta.optimistic) {\n    if (action.meta.fetch === DELETE) {\n      var index = previousState.map(function (el) {\n        return el === action.payload.id;\n      }) // eslint-disable-line eqeqeq\n      .indexOf(true);\n\n      if (index === -1) {\n        return previousState;\n      }\n\n      return __spreadArrays(previousState.slice(0, index), previousState.slice(index + 1));\n    }\n\n    if (action.meta.fetch === DELETE_MANY) {\n      var newState = previousState.filter(function (el) {\n        return !action.payload.ids.includes(el);\n      });\n      return newState;\n    }\n  }\n\n  switch (action.type) {\n    case CRUD_GET_LIST_SUCCESS:\n      return action.payload.data.map(function (_a) {\n        var id = _a.id;\n        return id;\n      });\n\n    case CRUD_CREATE_SUCCESS:\n      return uniq(__spreadArrays([action.payload.data.id], previousState));\n\n    default:\n      return previousState;\n  }\n};\n\nexport default idsReducer;\nexport var getIds = function (state) {\n  return state;\n};","map":null,"metadata":{},"sourceType":"module"}