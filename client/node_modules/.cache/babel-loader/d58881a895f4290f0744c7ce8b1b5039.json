{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { useTranslate } from 'ra-core';\nvar useStyles = makeStyles({\n  clearIcon: {\n    height: 16,\n    width: 0\n  },\n  visibleClearIcon: {\n    width: 16\n  },\n  clearButton: {\n    height: 24,\n    width: 24,\n    padding: 0\n  },\n  selectAdornment: {\n    position: 'absolute',\n    right: 24\n  },\n  inputAdornedEnd: {\n    paddingRight: 0\n  }\n}, {\n  name: 'RaResettableTextField'\n});\n\nvar handleMouseDownClearButton = function (event) {\n  event.preventDefault();\n};\n/**\n * An override of the default Material-UI TextField which is resettable\n */\n\n\nfunction ResettableTextField(props) {\n  var classesOverride = props.classes,\n      clearAlwaysVisible = props.clearAlwaysVisible,\n      InputProps = props.InputProps,\n      value = props.value,\n      resettable = props.resettable,\n      disabled = props.disabled,\n      _a = props.variant,\n      variant = _a === void 0 ? 'filled' : _a,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      rest = __rest(props, [\"classes\", \"clearAlwaysVisible\", \"InputProps\", \"value\", \"resettable\", \"disabled\", \"variant\", \"margin\"]);\n\n  var classes = useStyles(props);\n  var translate = useTranslate();\n  var onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur;\n  var handleClickClearButton = useCallback(function (event) {\n    event.preventDefault();\n    onChange('');\n  }, [onChange]);\n  var handleFocus = useCallback(function (event) {\n    onFocus && onFocus(event);\n  }, [onFocus]);\n  var handleBlur = useCallback(function (event) {\n    onBlur && onBlur(event);\n  }, [onBlur]);\n\n  var clearButton = classes.clearButton,\n      clearIcon = classes.clearIcon,\n      inputAdornedEnd = classes.inputAdornedEnd,\n      selectAdornment = classes.selectAdornment,\n      visibleClearButton = classes.visibleClearButton,\n      visibleClearIcon = classes.visibleClearIcon,\n      restClasses = __rest(classes, [\"clearButton\", \"clearIcon\", \"inputAdornedEnd\", \"selectAdornment\", \"visibleClearButton\", \"visibleClearIcon\"]);\n\n  var _c = InputProps || {},\n      endAdornment = _c.endAdornment,\n      InputPropsWithoutEndAdornment = __rest(_c, [\"endAdornment\"]);\n\n  if (clearAlwaysVisible && endAdornment) {\n    throw new Error('ResettableTextField cannot display both an endAdornment and a clear button always visible');\n  }\n\n  var getEndAdornment = function () {\n    var _a;\n\n    if (!resettable) {\n      return endAdornment;\n    } else if (!value) {\n      if (clearAlwaysVisible) {\n        // show clear button, inactive\n        return React.createElement(InputAdornment, {\n          position: \"end\",\n          classes: {\n            root: props.select ? selectAdornment : null\n          }\n        }, React.createElement(IconButton, {\n          className: clearButton,\n          \"aria-label\": translate('ra.action.clear_input_value'),\n          title: translate('ra.action.clear_input_value'),\n          disableRipple: true,\n          disabled: true\n        }, React.createElement(ClearIcon, {\n          className: classNames(clearIcon, visibleClearIcon)\n        })));\n      } else {\n        if (endAdornment) {\n          return endAdornment;\n        } else {\n          // show spacer\n          return React.createElement(InputAdornment, {\n            position: \"end\",\n            classes: {\n              root: props.select ? selectAdornment : null\n            }\n          }, React.createElement(\"span\", {\n            className: clearButton\n          }, \"\\u00A0\"));\n        }\n      }\n    } else {\n      // show clear\n      return React.createElement(InputAdornment, {\n        position: \"end\",\n        classes: {\n          root: props.select ? selectAdornment : null\n        }\n      }, React.createElement(IconButton, {\n        className: clearButton,\n        \"aria-label\": translate('ra.action.clear_input_value'),\n        title: translate('ra.action.clear_input_value'),\n        disableRipple: true,\n        onClick: handleClickClearButton,\n        onMouseDown: handleMouseDownClearButton,\n        disabled: disabled\n      }, React.createElement(ClearIcon, {\n        className: classNames(clearIcon, (_a = {}, _a[visibleClearIcon] = clearAlwaysVisible || value, _a))\n      })));\n    }\n  };\n\n  return React.createElement(MuiTextField, __assign({\n    classes: restClasses,\n    value: value,\n    InputProps: __assign({\n      classes: props.select && variant === 'filled' ? {\n        adornedEnd: inputAdornedEnd\n      } : {},\n      endAdornment: getEndAdornment()\n    }, InputPropsWithoutEndAdornment),\n    disabled: disabled,\n    variant: variant,\n    margin: margin\n  }, rest, {\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }));\n}\n\nResettableTextField.propTypes = {\n  classes: PropTypes.object,\n  clearAlwaysVisible: PropTypes.bool,\n  disabled: PropTypes.bool,\n  InputProps: PropTypes.object,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  resettable: PropTypes.bool,\n  value: PropTypes.any.isRequired\n};\nexport default ResettableTextField;","map":null,"metadata":{},"sourceType":"module"}