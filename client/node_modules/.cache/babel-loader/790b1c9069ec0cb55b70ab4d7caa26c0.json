{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport React, { Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from 'recompose';\nimport { useDropzone } from 'react-dropzone';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport classnames from 'classnames';\nimport { useInput, useTranslate } from 'ra-core';\nimport Labeled from './Labeled';\nimport FileInputPreview from './FileInputPreview';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport InputHelperText from './InputHelperText';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    dropZone: {\n      background: theme.palette.background.default,\n      cursor: 'pointer',\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.getContrastText(theme.palette.background.default)\n    },\n    preview: {},\n    removeButton: {},\n    root: {\n      width: '100%'\n    }\n  };\n}, {\n  name: 'RaFileInput'\n});\n\nvar FileInput = function (props) {\n  var accept = props.accept,\n      children = props.children,\n      className = props.className,\n      classesOverride = props.classes,\n      format = props.format,\n      helperText = props.helperText,\n      label = props.label,\n      _a = props.labelMultiple,\n      labelMultiple = _a === void 0 ? 'ra.input.file.upload_several' : _a,\n      _b = props.labelSingle,\n      labelSingle = _b === void 0 ? 'ra.input.file.upload_single' : _b,\n      maxSize = props.maxSize,\n      minSize = props.minSize,\n      _c = props.multiple,\n      multiple = _c === void 0 ? false : _c,\n      _d = props.options,\n      _e = _d === void 0 ? {} : _d,\n      inputPropsOptions = _e.inputProps,\n      options = __rest(_e, [\"inputProps\"]),\n      parse = props.parse,\n      placeholder = props.placeholder,\n      resource = props.resource,\n      source = props.source,\n      validate = props.validate,\n      rest = __rest(props, [\"accept\", \"children\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"labelMultiple\", \"labelSingle\", \"maxSize\", \"minSize\", \"multiple\", \"options\", \"parse\", \"placeholder\", \"resource\", \"source\", \"validate\"]);\n\n  var translate = useTranslate();\n  var classes = useStyles(props); // turn a browser dropped file structure into expected structure\n\n  var transformFile = function (file) {\n    var _a;\n\n    if (!(file instanceof File)) {\n      return file;\n    }\n\n    var _b = Children.only(children).props,\n        source = _b.source,\n        title = _b.title;\n    var preview = URL.createObjectURL(file);\n    var transformedFile = (_a = {\n      rawFile: file\n    }, _a[source] = preview, _a);\n\n    if (title) {\n      transformedFile[title] = file.name;\n    }\n\n    return transformedFile;\n  };\n\n  var transformFiles = function (files) {\n    if (!files) {\n      return multiple ? [] : null;\n    }\n\n    if (Array.isArray(files)) {\n      return files.map(transformFile);\n    }\n\n    return transformFile(files);\n  };\n\n  var _f = useInput(__assign({\n    format: format || transformFiles,\n    parse: parse || transformFiles,\n    source: source,\n    type: 'file',\n    validate: validate\n  }, rest)),\n      id = _f.id,\n      _g = _f.input,\n      onChange = _g.onChange,\n      value = _g.value,\n      inputProps = __rest(_g, [\"onChange\", \"value\"]),\n      meta = _f.meta,\n      isRequired = _f.isRequired;\n\n  var touched = meta.touched,\n      error = meta.error;\n  var files = value ? Array.isArray(value) ? value : [value] : [];\n\n  var onDrop = function (newFiles, rejectedFiles, event) {\n    var updatedFiles = multiple ? __spreadArrays(files, newFiles) : __spreadArrays(newFiles);\n\n    if (multiple) {\n      onChange(updatedFiles);\n    } else {\n      onChange(updatedFiles[0]);\n    }\n\n    if (options.onDrop) {\n      options.onDrop(newFiles, rejectedFiles, event);\n    }\n  };\n\n  var onRemove = function (file) {\n    return function () {\n      if (multiple) {\n        var filteredFiles = files.filter(function (stateFile) {\n          return !shallowEqual(stateFile, file);\n        });\n        onChange(filteredFiles);\n      } else {\n        onChange(null);\n      }\n    };\n  };\n\n  var childrenElement = isValidElement(Children.only(children)) ? Children.only(children) : undefined;\n\n  var _h = useDropzone(__assign(__assign({}, options), {\n    accept: accept,\n    maxSize: maxSize,\n    minSize: minSize,\n    multiple: multiple,\n    onDrop: onDrop\n  })),\n      getRootProps = _h.getRootProps,\n      getInputProps = _h.getInputProps;\n\n  return React.createElement(Labeled, __assign({\n    id: id,\n    label: label,\n    className: classnames(classes.root, className),\n    source: source,\n    resource: resource,\n    isRequired: isRequired,\n    meta: meta\n  }, sanitizeRestProps(rest)), React.createElement(React.Fragment, null, React.createElement(\"div\", __assign({\n    \"data-testid\": \"dropzone\",\n    className: classes.dropZone\n  }, getRootProps()), React.createElement(\"input\", __assign({\n    id: id\n  }, getInputProps(__assign(__assign({}, inputProps), inputPropsOptions)))), placeholder ? placeholder : multiple ? React.createElement(\"p\", null, translate(labelMultiple)) : React.createElement(\"p\", null, translate(labelSingle))), children && React.createElement(\"div\", {\n    className: \"previews\"\n  }, files.map(function (file, index) {\n    return React.createElement(FileInputPreview, {\n      key: index,\n      file: file,\n      onRemove: onRemove(file),\n      className: classes.removeButton\n    }, cloneElement(childrenElement, {\n      record: file,\n      className: classes.preview\n    }));\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  }))));\n};\n\nFileInput.propTypes = {\n  accept: PropTypes.string,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  labelMultiple: PropTypes.string,\n  labelSingle: PropTypes.string,\n  maxSize: PropTypes.number,\n  minSize: PropTypes.number,\n  multiple: PropTypes.bool,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  placeholder: PropTypes.node\n};\nexport default FileInput;","map":null,"metadata":{},"sourceType":"module"}