{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport MuiTab from '@material-ui/core/Tab';\nimport { useTranslate } from 'ra-core';\nimport classnames from 'classnames';\nimport Labeled from '../input/Labeled';\n\nvar sanitizeRestProps = function (_a) {\n  var contentClassName = _a.contentClassName,\n      label = _a.label,\n      icon = _a.icon,\n      value = _a.value,\n      translate = _a.translate,\n      rest = __rest(_a, [\"contentClassName\", \"label\", \"icon\", \"value\", \"translate\"]);\n\n  return rest;\n};\n/**\n * Tab element for the SimpleShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import FavoriteIcon from '@material-ui/icons/Favorite';\n *     import PersonPinIcon from '@material-ui/icons/PersonPin';\n *     import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </Tab>\n *                 <Tab label=\"Metadata\" icon={<PersonIcon />}>\n *                     <TextField source=\"category\" />\n *                </Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\n\nvar Tab = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      contentClassName = _a.contentClassName,\n      context = _a.context,\n      className = _a.className,\n      icon = _a.icon,\n      label = _a.label,\n      record = _a.record,\n      resource = _a.resource,\n      value = _a.value,\n      rest = __rest(_a, [\"basePath\", \"children\", \"contentClassName\", \"context\", \"className\", \"icon\", \"label\", \"record\", \"resource\", \"value\"]);\n\n  var translate = useTranslate();\n\n  var renderHeader = function () {\n    return React.createElement(MuiTab, __assign({\n      key: label,\n      label: translate(label, {\n        _: label\n      }),\n      value: value,\n      icon: icon,\n      className: classnames('show-tab', className),\n      component: Link,\n      to: value\n    }, sanitizeRestProps(rest)));\n  };\n\n  var renderContent = function () {\n    return React.createElement(\"span\", {\n      className: contentClassName\n    }, React.Children.map(children, function (field) {\n      return field && isValidElement(field) ? React.createElement(\"div\", {\n        key: field.props.source,\n        className: classnames('ra-field', \"ra-field-\" + field.props.source, field.props.className)\n      }, field.props.addLabel ? React.createElement(Labeled, {\n        label: field.props.label,\n        source: field.props.source,\n        basePath: basePath,\n        record: record,\n        resource: resource\n      }, field) : typeof field.type === 'string' ? field : React.cloneElement(field, {\n        basePath: basePath,\n        record: record,\n        resource: resource\n      })) : null;\n    }));\n  };\n\n  return context === 'header' ? renderHeader() : renderContent();\n};\n\nTab.propTypes = {\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  children: PropTypes.node,\n  context: PropTypes.oneOf(['header', 'content']),\n  icon: PropTypes.element,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string\n};\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}