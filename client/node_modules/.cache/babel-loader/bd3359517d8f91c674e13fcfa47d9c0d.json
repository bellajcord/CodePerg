{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle } from 'ra-core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    label: {\n      position: 'relative'\n    },\n    value: {\n      fontFamily: theme.typography.fontFamily,\n      color: 'currentColor',\n      padding: theme.spacing(1) + \"px 0 \" + theme.spacing(1) / 2 + \"px\",\n      border: 0,\n      boxSizing: 'content-box',\n      verticalAlign: 'middle',\n      background: 'none',\n      margin: 0,\n      display: 'block',\n      width: '100%'\n    }\n  };\n}, {\n  name: 'RaLabeled'\n});\n/**\n * Use any component as read-only Input, labeled just like other Inputs.\n *\n * Useful to use a Field in the Edit or Create components.\n * The child component will receive the current record.\n *\n * This component name doesn't have a typo. We had to choose between\n * the American English \"Labeled\", and the British English \"Labelled\".\n * We flipped a coin.\n *\n * @example\n * <Labeled label=\"Comments\">\n *     <FooComponent source=\"title\" />\n * </Labeled>\n */\n\nvar Labeled = function (props) {\n  var children = props.children,\n      className = props.className,\n      classesOverride = props.classes,\n      fullWidth = props.fullWidth,\n      id = props.id,\n      input = props.input,\n      isRequired = props.isRequired,\n      label = props.label,\n      _a = props.margin,\n      margin = _a === void 0 ? 'dense' : _a,\n      meta = props.meta,\n      resource = props.resource,\n      source = props.source,\n      rest = __rest(props, [\"children\", \"className\", \"classes\", \"fullWidth\", \"id\", \"input\", \"isRequired\", \"label\", \"margin\", \"meta\", \"resource\", \"source\"]);\n\n  var classes = useStyles(props);\n\n  if (!label && !source) {\n    // @ts-ignore\n    var name_1 = children && children.type && children.type.name;\n    throw new Error(\"Cannot create label for component <\" + name_1 + \">: You must set either the label or source props. You can also disable automated label insertion by setting 'addLabel: false' in the component default props\");\n  }\n\n  var restProps = fullWidth ? __assign(__assign({}, rest), {\n    fullWidth: fullWidth\n  }) : rest;\n  return React.createElement(FormControl, {\n    className: className,\n    fullWidth: fullWidth,\n    error: meta && meta.touched && !!meta.error,\n    margin: margin\n  }, React.createElement(InputLabel, {\n    htmlFor: id,\n    shrink: true,\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(\"div\", {\n    className: classes.value\n  }, children && typeof children.type !== 'string' ? React.cloneElement(children, __assign({\n    input: input,\n    resource: resource\n  }, restProps)) : children));\n};\n\nLabeled.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  fullWidth: PropTypes.bool,\n  id: PropTypes.string,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  onChange: PropTypes.func,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  labelStyle: PropTypes.object\n};\nexport default Labeled;","map":null,"metadata":{},"sourceType":"module"}