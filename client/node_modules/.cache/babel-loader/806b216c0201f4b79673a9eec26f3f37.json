{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useContext, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContentSave from '@material-ui/icons/Save';\nimport classnames from 'classnames';\nimport { useTranslate, useNotify, FormContext } from 'ra-core';\n\nvar SaveButton = function (props) {\n  var className = props.className,\n      classesOverride = props.classes,\n      invalid = props.invalid,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.action.save' : _a,\n      pristine = props.pristine,\n      redirect = props.redirect,\n      saving = props.saving,\n      submitOnEnter = props.submitOnEnter,\n      _b = props.variant,\n      variant = _b === void 0 ? 'contained' : _b,\n      _c = props.icon,\n      icon = _c === void 0 ? defaultIcon : _c,\n      onClick = props.onClick,\n      handleSubmitWithRedirect = props.handleSubmitWithRedirect,\n      onSave = props.onSave,\n      rest = __rest(props, [\"className\", \"classes\", \"invalid\", \"label\", \"pristine\", \"redirect\", \"saving\", \"submitOnEnter\", \"variant\", \"icon\", \"onClick\", \"handleSubmitWithRedirect\", \"onSave\"]);\n\n  var classes = useStyles(props);\n  var notify = useNotify();\n  var translate = useTranslate();\n  var setOnSave = useContext(FormContext).setOnSave;\n\n  var handleClick = function (event) {\n    if (typeof onSave === 'function') {\n      setOnSave(onSave);\n    } else {\n      // we reset to the Form default save function\n      setOnSave();\n    }\n\n    if (saving) {\n      // prevent double submission\n      event.preventDefault();\n    } else {\n      if (invalid) {\n        notify('ra.message.invalid_form', 'warning');\n      } // always submit form explicitly regardless of button type\n\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      handleSubmitWithRedirect(redirect);\n    }\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  };\n\n  var type = submitOnEnter ? 'submit' : 'button';\n  var displayedLabel = label && translate(label, {\n    _: label\n  });\n  return React.createElement(Button, __assign({\n    className: classnames(classes.button, className),\n    variant: variant,\n    type: type,\n    onClick: handleClick,\n    color: saving ? 'default' : 'primary',\n    \"aria-label\": displayedLabel\n  }, sanitizeRestProps(rest)), saving ? React.createElement(CircularProgress, {\n    size: 18,\n    thickness: 2,\n    className: classes.leftIcon\n  }) : cloneElement(icon, {\n    className: classnames(classes.leftIcon, classes.icon)\n  }), displayedLabel);\n};\n\nvar defaultIcon = React.createElement(ContentSave, null);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    button: {\n      position: 'relative'\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1)\n    },\n    icon: {\n      fontSize: 18\n    }\n  };\n}, {\n  name: 'RaSaveButton'\n});\n\nvar sanitizeRestProps = function (_a) {\n  var basePath = _a.basePath,\n      handleSubmit = _a.handleSubmit,\n      record = _a.record,\n      resource = _a.resource,\n      undoable = _a.undoable,\n      rest = __rest(_a, [\"basePath\", \"handleSubmit\", \"record\", \"resource\", \"undoable\"]);\n\n  return rest;\n};\n\nSaveButton.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  handleSubmitWithRedirect: PropTypes.func,\n  onSave: PropTypes.func,\n  invalid: PropTypes.bool,\n  label: PropTypes.string,\n  pristine: PropTypes.bool,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n  icon: PropTypes.element\n};\nexport default SaveButton;","map":null,"metadata":{},"sourceType":"module"}