{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ActionCheck from '@material-ui/icons/CheckCircle';\nimport AlertError from '@material-ui/icons/ErrorOutline';\nimport classnames from 'classnames';\nimport { useTranslate } from 'ra-core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    contentText: {\n      minWidth: 400\n    },\n    confirmPrimary: {\n      color: theme.palette.primary.main\n    },\n    confirmWarning: {\n      color: theme.palette.error.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n    iconPaddingStyle: {\n      paddingRight: '0.5em'\n    }\n  };\n}, {\n  name: 'RaConfirm'\n});\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     ConfirmIcon=ActionCheck\n *     CancelIcon=AlertError\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\n\nvar Confirm = function (props) {\n  var _a;\n\n  var isOpen = props.isOpen,\n      loading = props.loading,\n      title = props.title,\n      content = props.content,\n      confirm = props.confirm,\n      cancel = props.cancel,\n      confirmColor = props.confirmColor,\n      ConfirmIcon = props.ConfirmIcon,\n      CancelIcon = props.CancelIcon,\n      onClose = props.onClose,\n      onConfirm = props.onConfirm,\n      _b = props.translateOptions,\n      translateOptions = _b === void 0 ? {} : _b;\n  var classes = useStyles(props);\n  var translate = useTranslate();\n  var handleConfirm = useCallback(function (e) {\n    e.stopPropagation();\n    onConfirm(e);\n  }, [onConfirm]);\n  var handleClick = useCallback(function (e) {\n    e.stopPropagation();\n  }, []);\n  return React.createElement(Dialog, {\n    open: isOpen,\n    onClose: onClose,\n    onClick: handleClick,\n    \"aria-labelledby\": \"alert-dialog-title\"\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\"\n  }, translate(title, __assign({\n    _: title\n  }, translateOptions))), React.createElement(DialogContent, null, React.createElement(DialogContentText, {\n    className: classes.contentText\n  }, translate(content, __assign({\n    _: content\n  }, translateOptions)))), React.createElement(DialogActions, null, React.createElement(Button, {\n    disabled: loading,\n    onClick: onClose\n  }, React.createElement(CancelIcon, {\n    className: classes.iconPaddingStyle\n  }), translate(cancel, {\n    _: cancel\n  })), React.createElement(Button, {\n    disabled: loading,\n    onClick: handleConfirm,\n    className: classnames('ra-confirm', (_a = {}, _a[classes.confirmWarning] = confirmColor === 'warning', _a[classes.confirmPrimary] = confirmColor === 'primary', _a)),\n    autoFocus: true\n  }, React.createElement(ConfirmIcon, {\n    className: classes.iconPaddingStyle\n  }), translate(confirm, {\n    _: confirm\n  }))));\n};\n\nConfirm.propTypes = {\n  cancel: PropTypes.string,\n  classes: PropTypes.object,\n  confirm: PropTypes.string,\n  confirmColor: PropTypes.string,\n  ConfirmIcon: PropTypes.elementType,\n  CancelIcon: PropTypes.elementType,\n  content: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  loading: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired\n};\nConfirm.defaultProps = {\n  cancel: 'ra.action.cancel',\n  classes: {},\n  confirm: 'ra.action.confirm',\n  confirmColor: 'primary',\n  ConfirmIcon: ActionCheck,\n  CancelIcon: AlertError,\n  isOpen: false\n};\nexport default Confirm;","map":null,"metadata":{},"sourceType":"module"}