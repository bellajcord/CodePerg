{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { REGISTER_RESOURCE, UNREGISTER_RESOURCE, REFRESH_VIEW } from '../../../actions';\nimport data from './data';\nimport list from './list';\nimport validity from './validity';\nvar initialState = {};\nexport default (function (previousState, action) {\n  var _a;\n\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  if (action.type === REGISTER_RESOURCE) {\n    var resourceState = {\n      props: action.payload,\n      data: data(undefined, action),\n      list: list(undefined, action),\n      validity: validity(undefined, action)\n    };\n    return __assign(__assign({}, previousState), (_a = {}, _a[action.payload.name] = resourceState, _a));\n  }\n\n  if (action.type === UNREGISTER_RESOURCE) {\n    return Object.keys(previousState).reduce(function (acc, key) {\n      var _a;\n\n      if (key === action.payload) {\n        return acc;\n      }\n\n      return __assign(__assign({}, acc), (_a = {}, _a[key] = previousState[key], _a));\n    }, {});\n  }\n\n  if (action.type !== REFRESH_VIEW && (!action.meta || !action.meta.resource)) {\n    return previousState;\n  }\n\n  var resources = Object.keys(previousState);\n  var newState = resources.reduce(function (acc, resource) {\n    var _a;\n\n    return __assign(__assign({}, acc), (_a = {}, _a[resource] = action.type === REFRESH_VIEW || action.meta.resource === resource ? {\n      props: previousState[resource].props,\n      data: data(previousState[resource].data, action),\n      list: list(previousState[resource].list, action),\n      validity: validity(previousState[resource].validity, action)\n    } : previousState[resource], _a));\n  }, {});\n  return newState;\n});\nexport var getResources = function (state) {\n  return Object.keys(state).map(function (key) {\n    return state[key].props;\n  });\n};\nexport var getReferenceResource = function (state, props) {\n  return state[props.reference];\n};","map":null,"metadata":{},"sourceType":"module"}