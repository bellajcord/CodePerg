{"ast":null,"code":"import { useCallback } from 'react';\nimport inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useNotify, useRedirect, useRefresh } from '../sideEffect';\nimport { useGetOne, useUpdate } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { CRUD_GET_ONE, CRUD_UPDATE } from '../actions';\n/**\n * Prepare data for the Edit view\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = props => {\n *     const controllerProps = useEditController(props);\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\n\nvar useEditController = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      id = props.id,\n      resource = props.resource,\n      successMessage = props.successMessage,\n      _a = props.undoable,\n      undoable = _a === void 0 ? true : _a;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var version = useVersion();\n\n  var _b = useGetOne(resource, id, {\n    version: version,\n    action: CRUD_GET_ONE,\n    onFailure: function () {\n      notify('ra.notification.item_doesnt_exist', 'warning');\n      redirect('list', basePath);\n      refresh();\n    }\n  }),\n      record = _b.data,\n      loading = _b.loading,\n      loaded = _b.loaded;\n\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 1,\n    _: inflection.humanize(inflection.singularize(resource))\n  });\n  var defaultTitle = translate('ra.page.edit', {\n    name: \"\" + resourceName,\n    id: id,\n    record: record\n  });\n\n  var _c = useUpdate(resource, id, {}, // set by the caller\n  record),\n      update = _c[0],\n      saving = _c[1].loading;\n\n  var save = useCallback(function (data, redirectTo, _a) {\n    if (redirectTo === void 0) {\n      redirectTo = DefaultRedirect;\n    }\n\n    var _b = _a === void 0 ? {} : _a,\n        onSuccess = _b.onSuccess,\n        onFailure = _b.onFailure;\n\n    return update({\n      payload: {\n        data: data\n      }\n    }, {\n      action: CRUD_UPDATE,\n      onSuccess: onSuccess ? onSuccess : function () {\n        notify(successMessage || 'ra.notification.updated', 'info', {\n          smart_count: 1\n        }, undoable);\n        redirect(redirectTo, basePath, data.id, data);\n      },\n      onFailure: onFailure ? onFailure : function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n\n        if (undoable) {\n          refresh();\n        }\n      },\n      undoable: undoable\n    });\n  }, [update, undoable, notify, successMessage, redirect, basePath, refresh]);\n  return {\n    loading: loading,\n    loaded: loaded,\n    saving: saving,\n    defaultTitle: defaultTitle,\n    save: save,\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    redirect: DefaultRedirect,\n    version: version\n  };\n};\n\nexport default useEditController;\nvar DefaultRedirect = 'list';","map":null,"metadata":{},"sourceType":"module"}